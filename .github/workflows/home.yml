# 정적 파일이 위치하는 서버에 backports-zoneinfo 패키지를 추가로 설치한다 -> poetry add --no-dev backports-zoneinfo
# 미 설치시 collectstatic 명령이 안된다.

name: Docker Image CI

on:
  push:
    branches: [ feature/CI_CD_설정 ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
          coverage report
          poetry run ./manage.py test --settings=shop_django.settings.dev
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: | 
        docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }} 
        docker build . --file Dockerfile --tag ${{ secrets.DOCKER_HUB_USERNAME }}/shop:${GITHUB_SHA::7}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/shop:${GITHUB_SHA::7}
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master  # docs: https://github.com/marketplace/actions/ssh-remote-commands?version=v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        envs: GITHUB_SHA
        script: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/shop:${GITHUB_SHA::7}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/shop:${GITHUB_SHA::7} shop_api
          docker stop server 
          docker run -d --rm --name server -p 8000:8000 \
            -e DJANGO_SETTINGS_MODULE=shop_django.settings.prod \
            -e DB_USER="${{ secrets.DB_USER }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DB_HOST="${{ secrets.DB_HOST }}" \
            -e DB_PORT="${{ secrets.DB_PORT }}" \
            -e STATIC_ROOT="${{ secrets.STATIC_ROOT }}" \
            -e SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" shop_api
          cd ~/Projects/shop_api_django
          git pull
          /home/paul/.pyenv/shims/python manage.py collectstatic --settings=shop_django.settings.collectstatic --no-input
